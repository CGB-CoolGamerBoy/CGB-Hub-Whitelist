local StrToNumber	= tonumber;
local Byte			= string.byte;
local Char			= string.char;
local Sub			= string.sub;
local Subg			= string.gsub;
local Rep			= string.rep;
local Concat		= table.concat;
local Insert		= table.insert;
--local LDExp			= math.ldexp;
local GetFEnv		= getfenv or function() return _ENV end;
local Setmetatable	= setmetatable;
local PCall			= pcall;
local Select		= select;
local Unpack = unpack or table.unpack;
local ToNumber = tonumber;
local function VMCall(ByteString, vmenv)
local DIP = 1;
local repeatNext;
ByteString = Subg(Sub(ByteString, 5), '..', function(byte)
if Byte(byte, 2) == 79 then -- TODO: rep char O
	repeatNext = StrToNumber(Sub(byte, 1, 1))
  return ''
else
		local a = Char(StrToNumber(byte, 16))
		if repeatNext then
			local b = Rep(a, repeatNext)
			repeatNext = nil
			return b
		else
			return a
		end
	end
end)
local function gBit(Bit, Start, End)
	if End then
		local Res = (Bit / 2 ^ (Start - 1)) % 2 ^ ((End - 1) - (Start - 1) + 1);
		return Res - Res % 1;
	else
		local Plc = 2 ^ (Start - 1);
        return (Bit % (Plc + Plc) >= Plc) and 1 or 0;
	end;
end;
local function gBits8()
    local a = Byte(ByteString, DIP, DIP);
    DIP = DIP + 1;
    return a;
end;
local function gBits16()
    local a, b = Byte(ByteString, DIP, DIP + 2);
    DIP	= DIP + 2;
    return (b*256) + a;
end;
local function gBits32()
    local a, b, c, d = Byte(ByteString, DIP, DIP + 3);
    DIP	= DIP + 4;
    return (d*16777216) + (c*65536) + (b*256) + a;
end;
local function gFloat()
	local l = gBits32()
	local r = gBits32()
	return (-2*gBit(r, 32)+1)*(2^(gBit(r, 21, 31)-1023))*((gBit(r, 1, 20)*(2^32) + l)/(2^52)+1)
end
local function gString(Len)
    local Str;
    if (not Len) then
        Len = gBits32();
        if (Len == 0) then
            return '';
        end;
    end;

    Str	= Sub(ByteString, DIP, DIP + Len - 1);
    DIP = DIP + Len;

	local FStr = {}
	for Idx = 1, #Str do
		FStr[Idx] = Char(Byte(Sub(Str, Idx, Idx)))
	end

    return Concat(FStr);
end;

local gInt = gBits32;
local function _R(...) return {...}, Select('#', ...) end

local function Deserialize()
    local Instrs = {};
    local Functions = {};
	local Lines = {};
    local Chunk = 
	{
		Instrs,
		Functions,
		nil,
		Lines
	};
	local ConstCount = gBits32()							-- L:128
    local Consts = {}
	for Idx=1, ConstCount do 
		local Type = gBits8();								-- L:131
		local Cons;
	
		if(Type==1) then Cons = (gBits8() ~= 0);	-- L:135
		elseif(Type==2) then Cons = gFloat();		-- L:138
		elseif(Type==3) then Cons = gString();	-- L:141
		end;
		
		Consts[Idx] = Cons;
	end;
Chunk[3] = gBits8();for Idx=1,gBits32() do 
									local Descriptor = gBits8();
									if (gBit(Descriptor, 1, 1) == 0) then
										local Type = gBit(Descriptor, 2, 3);
										local Mask = gBit(Descriptor, 4, 6);
										
										local Inst=
										{
											gBits16(),
											gBits16(),
											nil,
											nil
										};
	
										if (Type == 0) then 
											Inst[3] = gBits16(); 
											Inst[4] = gBits16();
										elseif(Type==1) then 
											Inst[3] = gBits32();
										elseif(Type==2) then 
											Inst[3] = gBits32() - (2 ^ 16)
										elseif(Type==3) then 
											Inst[3] = gBits32() - (2 ^ 16)
											Inst[4] = gBits16();
										end;
	
										if (gBit(Mask, 1, 1) == 1) then Inst[2] = Consts[Inst[2]] end
										if (gBit(Mask, 2, 2) == 1) then Inst[3] = Consts[Inst[3]] end
										if (gBit(Mask, 3, 3) == 1) then Inst[4] = Consts[Inst[4]] end
										
										Instrs[Idx] = Inst;
									end
								end;for Idx=1,gBits32() do Functions[Idx-1]=Deserialize();end;for Idx=1,gBits32() do Lines[Idx]=gBits32();end;return Chunk;end;
local function Wrap(Chunk, Upvalues, Env)
	local Instr = Chunk[1];
	local Proto = Chunk[2];
	local Params = Chunk[3];

	return function(...)
		local VIP = 1;
		local Top = -1;

		local Args = {...};
		local PCount = Select('#', ...) - 1;

		local function Loop()
			local Instr  = Instr; 
			local Const  = Const; 
			local Proto  = Proto; 
			local Params = Params;

			local _R = _R
			local Vararg = {};

			local Lupvals = {};
			local Stk = {};
	
			for Idx = 0, PCount do
				if (Idx >= Params) then
					Vararg[Idx - Params] = Args[Idx + 1];
				else
					Stk[Idx] = Args[Idx + 1];
				end;
			end;
	
			local Varargsz = PCount - Params + 1

			local Inst;
			local Enum;	

			while true do
				Inst = Instr[VIP];
				Enum = Inst[1];if Enum <= 34 then if Enum <= 16 then if Enum <= 7 then if Enum <= 3 then if Enum <= 1 then if Enum == 0 then do return end;else Stk[Inst[2]]=Stk[Inst[3]][Stk[Inst[4]]];end; elseif Enum == 2 then if(Stk[Inst[2]]==Inst[4])then VIP=VIP+1;else VIP=Inst[3];end;else local A = Inst[2];
local T = Stk[A];
for Idx = A + 1, Inst[3] do 
	Insert(T, Stk[Idx])
end;end; elseif Enum <= 5 then if Enum == 4 then 
local A = Inst[2];
local Step = Stk[A + 2];
local Index = Stk[A] + Step;
Stk[A] = Index;
if (Step > 0) then 
	if (Index <= Stk[A+1]) then
		VIP = Inst[3];
		Stk[A+3] = Index;
	end
elseif (Index >= Stk[A+1]) then
	VIP = Inst[3];
	Stk[A+3] = Index;
end
else Stk[Inst[2]]=Stk[Inst[3]]+Stk[Inst[4]];end; elseif Enum > 6 then Upvalues[Inst[3]]=Stk[Inst[2]];else if(Stk[Inst[2]]<=Inst[4]]then VIP=VIP+1;else VIP=Inst[3];end;end; elseif Enum <= 11 then if Enum <= 9 then if Enum > 8 then Stk[Inst[2]]=Wrap(Proto[Inst[3]],nil,Env);else Stk[Inst[2]]=Inst[3]*Stk[Inst[4]];end; elseif Enum > 10 then 
local A = Inst[2]
local Results = { Stk[A](Unpack(Stk, A + 1, Inst[3])) };
local Edx = 0;
for Idx = A, Inst[4] do 
	Edx = Edx + 1;
	Stk[Idx] = Results[Edx];
end
else Stk[Inst[2]] = Stk[Inst[3]] + Inst[4];end; elseif Enum <= 13 then if Enum == 12 then Stk[Inst[2]]=Inst[3]^Stk[Inst[4]];else Stk[Inst[2]]=Inst[3];end; elseif Enum <= 14 then if Stk[Inst[2]] then VIP=VIP+1;else VIP=Inst[3];end; elseif Enum == 15 then VIP=Inst[3];else if(Inst[2]~=Stk[Inst[4]])then VIP=VIP+1;else VIP=Inst[3];end;end; elseif Enum <= 25 then if Enum <= 20 then if Enum <= 18 then if Enum > 17 then local NewProto=Proto[Inst[3]];local NewUvals;local Indexes={};NewUvals=Setmetatable({},{__index=function(_,Key)local Val=Indexes[Key];return Val[1][Val[2]];end,__newindex=function(_,Key,Value)local Val=Indexes[Key] Val[1][Val[2]]=Value;end;});for Idx=1,Inst[4] do VIP=VIP+1;local Mvm=Instr[VIP];if Mvm[1]==43 then Indexes[Idx-1]={Stk,Mvm[3]};else Indexes[Idx-1]={Upvalues,Mvm[3]};end;Lupvals[#Lupvals+1]=Indexes;end;Stk[Inst[2]]=Wrap(NewProto,NewUvals,Env);else if(Inst[2]==Stk[Inst[4]])then VIP=VIP+1;else VIP=Inst[3];end;end; elseif Enum == 19 then 
local A = Inst[2]
Stk[A](Unpack(Stk, A + 1, Top))
else Stk[Inst[2]]=Stk[Inst[3]]%Stk[Inst[4]];end; elseif Enum <= 22 then if Enum == 21 then 
local A = Inst[2]
local Results, Limit = _R(Stk[A](Stk[A + 1]))
Top = Limit + A - 1
local Edx = 0;
for Idx = A, Top do 
	Edx = Edx + 1;
	Stk[Idx] = Results[Edx];
end;
else Stk[Inst[2]]=Stk[Inst[3]]/Stk[Inst[4]];end; elseif Enum <= 23 then Stk[Inst[2]]=Stk[Inst[3]]-Stk[Inst[4]]; elseif Enum == 24 then if(Stk[Inst[2]]<=Inst[4])then VIP=Inst[3];else VIP=VIP+1;end;else Stk[Inst[2]]=Stk[Inst[3]]%Inst[4];end; elseif Enum <= 29 then if Enum <= 27 then if Enum > 26 then 
local A = Inst[2];
do return Unpack(Stk, A, A + Inst[3]) end;
else local A=Inst[2];Top=A+Varargsz-1;for Idx=A,Top do local VA=Vararg[Idx-A];Stk[Idx]=VA;end;end; elseif Enum > 28 then Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];else Stk[Inst[2]]=Env[Inst[3]];end; elseif Enum <= 31 then if Enum == 30 then 
local A = Inst[2]
Stk[A] = Stk[A]()
else if not Stk[Inst[2]] then VIP=VIP+1;else VIP=Inst[3];end;end; elseif Enum <= 32 then 
local A = Inst[2]
local Results = { Stk[A](Unpack(Stk, A + 1, Top)) };
local Edx = 0;
for Idx = A, Inst[4] do 
	Edx = Edx + 1;
	Stk[Idx] = Results[Edx];
end
 elseif Enum > 33 then if(Stk[Inst[2]]~=Inst[4])then VIP=VIP+1;else VIP=Inst[3];end;else Stk[Inst[2]]=Upvalues[Inst[3]];end; elseif Enum <= 51 then if Enum <= 42 then if Enum <= 38 then if Enum <= 36 then if Enum == 35 then 
local A = Inst[2]
Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3])) 
else Stk[Inst[2]]=#Stk[Inst[3]];end; elseif Enum == 37 then 
local A = Inst[2]
Stk[A](Stk[A + 1])
else Stk[Inst[2]]=(Inst[3]~=0);VIP=VIP+1;end; elseif Enum <= 40 then if Enum > 39 then 
local A = Inst[2]
Stk[A](Unpack(Stk, A + 1, Inst[3]))
else local A=Inst[2];local Cls={};for Idx=1,#Lupvals do local List=Lupvals[Idx];for Idz=0,#List do local Upv=List[Idz];local NStk=Upv[1];local DIP=Upv[2]; if NStk==Stk and DIP>=A then Cls[DIP]=NStk[DIP];Upv[1]=Cls;end;end;end;end; elseif Enum > 41 then do return Stk[Inst[2]](); end;else Stk[Inst[2]]=Stk[Inst[3]]/Inst[4];end; elseif Enum <= 46 then if Enum <= 44 then if Enum == 43 then Stk[Inst[2]]=Stk[Inst[3]];else 
local A = Inst[2];
local Index = Stk[A]
local Step = Stk[A + 2];
if (Step > 0) then 
	if (Index > Stk[A+1]) then
		VIP = Inst[3];
	else
		Stk[A+3] = Index;
	end
elseif (Index < Stk[A+1]) then
	VIP = Inst[3];
else
	Stk[A+3] = Index;
end
end; elseif Enum > 45 then Stk[Inst[2]]=(Inst[3]~=0);else 
local A = Inst[2]
local Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Top)))
Top = Limit + A - 1
local Edx = 0;
for Idx = A, Top do 
	Edx = Edx + 1;
	Stk[Idx] = Results[Edx];
end;
end; elseif Enum <= 48 then if Enum == 47 then local B=Stk[Inst[4]];if not B then InstrPoint=InstrPoint+1;else Stk[Inst[2]]=B;InstrPoint=Inst[3];end;else 
local A = Inst[2];
do return Stk[A](Unpack(Stk, A + 1, Inst[3])) end;end; elseif Enum <= 49 then for Idx=Inst[2],Inst[3] do Stk[Idx]=nil;end; elseif Enum == 50 then 
local A = Inst[2]
local Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])))
Top = Limit + A - 1
local Edx = 0;
for Idx = A, Top do 
	Edx = Edx + 1;
	Stk[Idx] = Results[Edx];
end;
else Stk[Inst[2]]=Stk[Inst[3]]-Inst[4];end; elseif Enum <= 60 then if Enum <= 55 then if Enum <= 53 then if Enum > 52 then Stk[Inst[2]]=Stk[Inst[3]]*Stk[Inst[4]];else Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];end; elseif Enum > 54 then if(Stk[Inst[2]]<=Stk[Inst[4]])then VIP=VIP+1;else VIP=Inst[3];end;else local A=Inst[2];local T=Stk[A];local B=Inst[3];for Idx=1,B do T[Idx]=Stk[A+Idx] end;end; elseif Enum <= 57 then if Enum > 56 then 
local A = Inst[2]
Stk[A] = Stk[A](Unpack(Stk, A + 1, Top))
else 
local A = Inst[2];
local T = Stk[A];
for Idx = A + 1, Top do 
	Insert(T, Stk[Idx])
end;end; elseif Enum <= 58 then if(Inst[2]<Stk[Inst[4]])then VIP=Inst[3];else VIP=VIP+1;end; elseif Enum == 59 then 
local A = Inst[2]; 
do return Unpack(Stk, A, Top) end;else if(Inst[2]==Inst[4]) then VIP=VIP+1;else VIP=Inst[3];end;end; elseif Enum <= 64 then if Enum <= 62 then if Enum == 61 then local B=Inst[3];local K=Stk[B] for Idx=B+1,Inst[4] do K=K..Stk[Idx];end;Stk[Inst[2]]=K;else Stk[Inst[2]][Stk[Inst[3]]]=Stk[Inst[4]];end; elseif Enum > 63 then 
do return Stk[Inst[2]] end
else if(Inst[2]<Inst[4])then VIP=VIP+1;else VIP=Inst[3];end;end; elseif Enum <= 66 then if Enum == 65 then Stk[Inst[2]]={};else 
local A = Inst[2]
local Results, Limit = _R(Stk[A]())
Top = Limit + A - 1
local Edx = 0;
for Idx = A, Top do 
	Edx = Edx + 1;
	Stk[Idx] = Results[Edx];
end;
end; elseif Enum <= 67 then if(Inst[2]<=Inst[4])then VIP=VIP+1;else VIP=Inst[3];end; elseif Enum > 68 then Stk[Inst[2]]=Stk[Inst[3]]*Inst[4];else Env[Inst[3]]=Stk[Inst[2]];end;
				VIP	= VIP + 1;
			end;
		end;

		A, B = _R(PCall(Loop))
		if not A[1] then
			local line = Chunk[4][VIP] or '?'
			error('Script error at [' .. line .. ']:' .. A[2])
		else
			return Unpack(A, 2, B)
		end;
	end;
end;	
return Wrap(Deserialize(), {}, vmenv)();
end

VMCalletFEnv());
